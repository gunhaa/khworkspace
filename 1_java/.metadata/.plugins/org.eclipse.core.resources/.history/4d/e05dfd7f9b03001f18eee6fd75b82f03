package edu.kh.oop.method.model.service;

import java.util.Scanner;

import edu.kh.oop.method.model.vo.Member;

public class MemberService { // 클래스

	// 속성(필드)
	private Scanner sc = new Scanner(System.in);
	// System.in : 자바에서 기본적으로 지정해둔 입력 장치(키보드)

	private Member memberInfo = null; // 가입한 회원의 정보를 저장할 변수
	private Member longinMember = null; // 로그인한 회원의 정보를 저장할 변수

	// 기능(생성자, 메소드)
	public MemberService() {} // 기본 생성자

	// ** 메소드 작성법 **

	// [접근 제한자]		[예약어]				  반환형			메소드명([매개변수]){}
	// public			static			     기본자료형			
	// protected		final			  참조형(배열, 클래스)
	// (default)		abstract		      void
	// private			static final


	public void displayMenu() { // 메뉴 화면 출력 기능

		int menuNum = 0; // 메뉴 선택용 변수

		do { // 한번은 무조건 반복

			System.out.println("=====회원 정보 관리 프로그램 v1 =====");
			System.out.println("1. 회원가입");
			System.out.println("2. 로그인");
			System.out.println("3. 정보 조회");
			System.out.println("4. 회원 정보 수정");
			System.out.println("0. 프로그램 종료");

			System.out.println("메뉴 입력 >> ");
			menuNum = sc.nextInt(); // 필드에 작성된 Scanner sc 사용

			switch(menuNum) {
			case 1 : System.out.println(signUp() ); break;
			// 같은 클래스 내부에 있는 필드, 메소드는 이름만 불러도 호출 가능!

			case 2 : break;
			case 3 : break;
			case 4 : break;
			case 0 : System.out.println("프로그램을 종료합니다..."); break;
			default : System.out.println("잘못 입력하셨습니다. 다시 입력 해주세요.");

			}


		} while(menuNum !=0);

	}

	// 회원 가입 기능

	public String signUp() {//This method must return a result of type String
		//(반환형)
		// 해당 메소드가 끝나고 호출한 곳으로 돌아갈 때
		// void : 반환할 값이 없다.
		// String : String 자료형 값을 가지고 돌아간다.


		System.out.println("\n**********회원 가입 **********");

		System.out.print("아이디 : ");
		String memberId = sc.next();

		System.out.print("비밀번호 ");
		String memberPw = sc.next();

		System.out.print("비밀번호 확인: ");
		String memberPw2 = sc.next();

		System.out.print("이름 : ");
		String memberName = sc.next();

		System.out.print("나이 : ");
		int memberAge = sc.nextInt();

		//비밀번호, 비밀번호 확인이 일치하면 회원가입
		// 일치하지 않으면 회원가입 실패

		if(memberPw.equals(memberPw2)) { // 일치하는 경우

			// 입력 받은 정보를 이용해서 Member 객체를 생성한 후
			// 생성된 객체의 주소를 필드에 있는 memberInfo에 대입

			memberInfo = new Member(memberId, memberPw, memberName, memberAge);
			return "회원 가입 성공!!";


		} else { // 일치하지 않는 경우
			return "회원 가입 실패!! (비밀번호 불일치)";

		}


	}
	
	
	// 로그인 메소드(기능)
	public String login() {
		
		System.out.println("\n **********로그인**********");
				// 획원 가입을 했는지 부터 확인
				//-- memberIf가 객체를 참조하고 있는지 확인
		if(memberInfo) { // 회원 가입을 먼저 안한 경우
			// null : 아무것도 참조하고 있지 않음
			
			retunr : "회원 가입부터 진행해주세요.";
		}
				
				//회원 가입 정보(memberInfo가 참조하는 Member 객체)에서
				// 저장된 아이디디, 비밀번호가
				// 입력된 아이디, 비밀번호가 같으면 "로그인 성공"
				// 아니면 "아이디 또는 비밀번호가 일치하지 않습니다."
		
		System.out.println("아이디 입력 : ");
		String memberId = sc.next();
		
		System.out.print("비밀번호 입력 : ");
		String memberPw = sc.next();
		
		// 아이디, 비밀번호가 모두 일치할 경우
		if(memberInfo.getMemberId().equls(memberId) && 
				memberinfo.getMemberPw().equals(memberPw) ) {
			//입력 받은 memberId와
			// memberInfo 필드에서 참조 중인 Member 객체의 memberId가 같은지 확인
			
		} else {
			
		}
			


}	


















}
