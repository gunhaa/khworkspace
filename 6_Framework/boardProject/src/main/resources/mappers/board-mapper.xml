<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="boardMapper">


<!-- Board DTO에 대한 resultMap -->
   <resultMap type="Board" id="board_rm">
   
      <id property="boardNo" column="BOARD_NO"/>
      
      <result property="boardTitle" column="BOARD_TITLE"/>
      <result property="boardContent" column="BOARD_CONTENT"/>
      <result property="boardCreateDate" column="B_CREATE_DATE"/>
      <result property="boardUpdateDate" column="B_UPDATE_DATE"/>
      <result property="readCount" column="READ_COUNT"/>
      <result property="commentCount" column="COMMENT_COUNT"/>
      <result property="boardName" column="BOARD_NAME"/>
      <result property="boardCode" column="BOARD_CODE" />
            
      <result property="likeCount" column="LIKE_COUNT"/>
      <result property="memberNickname" column="MEMBER_NICKNAME"/>

      
      <result property="memberNo" column="MEMBER_NO"/>
      <result property="profileImage" column="PROFILE_IMG"/>
      
      <result property="thumbnail" column="THUMBNAIL"/>
      
      <!-- collection 태그
      		: select로 조회된 결과를 컬렉션(List)에 담아 지정된 필드에 세팅
       		
       		property : List를 담을 DTO의 필드명
      		select : 실행할 select의 id 
       		column : 조회 결과 중 지정된 컬럼의 값을 파라미터로 전달
       		javaType : List(컬렉션)의 타입을 지정
       		ofType : List(컬렉션)의 제네릭(타입 제한) 지정
       -->
      <collection property="imageList" select="selectImageList" column="BOARD_NO" javaType="java.util.ArrayList" ofType="BoardImage"></collection>
      
      <collection property="commentList" select="selectCommentList" column="BOARD_NO" javaType="java.util.ArrayList" ofType="Comment"></collection>
      
   </resultMap>


   <resultMap type="BoardImage" id="boardImage_rm">
   
      <id property="imageNo" column="IMG_NO"/>
      
      <result property="imagePath" column="IMG_PATH"/>
      <result property="imageReName" column="IMG_RENAME"/>
      <result property="imageOriginal" column="IMG_ORIGINAL"/>
      <result property="imageOrder" column="IMG_ORDER"/>
      <result property="boardNo" column="BOARD_NO"/>

   </resultMap>


   <!-- comment resultMap -->
   <resultMap type="Comment" id="comment_rm">
      <id property="commentNo" column="COMMENT_NO" />
      <result property="commentContent" column="COMMENT_CONTENT" />
      <result property="commentCreateDate" column="C_CREATE_DATE" />
      <result property="boardNo" column="BOARD_NO" />
      <result property="memberNo" column="MEMBER_NO" />
      <result property="commentDeleteFlag" column="COMMENT_DEL_FL" />
      <result property="parentNo" column="PARENT_NO" />
      <result property="memberNickname" column="MEMBER_NICKNAME" />
      <result property="profileImage" column="PROFILE_IMG" />
   </resultMap>

	<!-- 
		resultType이 "map"인 경우 
		K: 컬럼명 (BOARD_CODE , BOARD_NAME)
		V: 컬럼값 (     1     ,   공지사항  )
	-->
	<!-- 게시판 종류 목록 조회 -->
	<select id="selectBoardTypeList" resultType="map">
		SELECT * FROM "BOARD_TYPE"
	</select>
	
	<!-- 특정 게시판의 삭제되지 않은 게시글 수 조회 -->
	<select id="getListCount" resultType="_int">
		select count(*) from board where board_code=#{boardCode} and board_del_fl='N'
	</select>

	
	<!-- CDATA 태그 : 해당 태그 내부에 작성된 것을 모두 문자 취급  -->
	<!-- 게시글 목록 조회 -->
	
	<select id="selectBoardList" resultMap="board_rm">
		SELECT BOARD_NO, BOARD_TITLE, MEMBER_NICKNAME, READ_COUNT, 
         
         	<![CDATA[
            CASE  
               WHEN SYSDATE - B_CREATE_DATE < 1/24/60
               THEN FLOOR( (SYSDATE - B_CREATE_DATE) * 24 * 60 * 60 ) || '초 전'
               WHEN SYSDATE - B_CREATE_DATE < 1/24
               THEN FLOOR( (SYSDATE - B_CREATE_DATE) * 24 * 60) || '분 전'
               WHEN SYSDATE - B_CREATE_DATE < 1
               THEN FLOOR( (SYSDATE - B_CREATE_DATE) * 24) || '시간 전'
               ELSE TO_CHAR(B_CREATE_DATE, 'YYYY-MM-DD')
            END B_CREATE_DATE,
            ]]>
		         (SELECT COUNT(*) FROM "COMMENT" C
		          WHERE C.BOARD_NO = B.BOARD_NO) COMMENT_COUNT,
		          
		         (SELECT COUNT(*) FROM BOARD_LIKE L
		          WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT,
		          
		         (SELECT IMG_PATH || IMG_RENAME FROM BOARD_IMG I
		         WHERE I.BOARD_NO = B.BOARD_NO
		         AND IMG_ORDER = 0) THUMBNAIL
			      FROM "BOARD" B
			      JOIN "MEMBER" USING(MEMBER_NO)
			      WHERE BOARD_DEL_FL = 'N'
			      AND BOARD_CODE = ${boardCode}
			      ORDER BY BOARD_NO DESC
	</select>
	
	<!-- 게시글 상세 조회 -->
	<select id="selectBoard" resultMap="board_rm">
		SELECT BOARD_NO, BOARD_TITLE, BOARD_CODE, BOARD_CONTENT, TO_CHAR(B_CREATE_DATE, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분" SS"초"') AS B_CREATE_DATE, TO_CHAR(B_UPDATE_DATE, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분" SS"초"') AS B_UPDATE_DATE, READ_COUNT,MEMBER_NO, MEMBER_NICKNAME,PROFILE_IMG ,(select count(*) from board_like L where L.board_no=B.BOARD_NO) as LIKE_COUNT
		FROM BOARD B
		JOIN MEMBER USING(MEMBER_NO)
		WHERE BOARD_NO=#{boardNo} AND BOARD_CODE=#{boardCode} AND BOARD_DEL_FL='N'
	</select>
	
	
	<!-- 특정 게시글 이미지 조회 -->
	
	<select id="selectImageList" resultMap="boardImage_rm">
		SELECT * FROM BOARD_IMG
		WHERE BOARD_NO=#{boardNo} 
		ORDER BY IMG_ORDER
	</select>
	
	<!-- 특정 게시글 댓글 조회(바뀔 예정) -->
	<select id="selectCommentList" resultMap="comment_rm">
		SELECT LEVEL, C.*
		FROM (SELECT COMMENT_NO, COMMENT_CONTENT , TO_CHAR(C_CREATE_DATE, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분" SS"초"') AS C_CREATE_DATE, BOARD_NO, MEMBER_NO, MEMBER_NICKNAME, PROFILE_IMG,PARENT_NO,COMMENT_DEL_FL
		FROM "COMMENT"
		JOIN MEMBER USING(MEMBER_NO)
		WHERE BOARD_NO=#{boardNo}
		ORDER BY COMMENT_NO) C
		WHERE COMMENT_DEL_FL = 'N'
		START WITH PARENT_NO IS NULL
		CONNECT BY PRIOR COMMENT_NO = PARENT_NO
		ORDER SIBLINGS BY COMMENT_NO
	</select>


<!-- 		SELECT COMMENT_NO, COMMENT_CONTENT , TO_CHAR(C_CREATE_DATE, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분" SS"초"') AS C_CREATE_DATE, BOARD_NO, MEMBER_NO, MEMBER_NICKNAME, PROFILE_IMG,PARENT_NO
		FROM "COMMENT"
		JOIN MEMBER USING(MEMBER_NO)
		WHERE BOARD_NO=#{boardNo}
		ORDER BY COMMENT_NO -->


	<!-- 좋아요 조회 -->
	<select id="boardLikeCheck" resultType="_int">
		SELECT COUNT(*) FROM BOARD_LIKE
		WHERE BOARD_NO=#{boardNo}
		AND MEMBER_NO=#{memberNo}
	</select>
	
	<!-- 좋아요 삽입 -->
	<!-- resultType을 쓰지 않아도 된다. -->
	<select id="boardLikeInsert" resultType="_int">
		INSERT INTO BOARD_LIKE VALUES(#{boardNo}, #{memberNo})
	</select>


	<!-- 좋아요 삭제 -->
	<!-- resultType을 쓰지 않아도 된다. -->
	<select id="boardLikeDelete" resultType="_int">
		DELETE FROM BOARD_LIKE WHERE BOARD_NO=#{boardNo} AND MEMBER_NO=#{memberNo}
	</select>
	
	<!-- 좋아요 개수 조회 -->
	<select id="countBoardLike" resultType="_int">
		SELECT COUNT(*) FROM BOARD_LIKE WHERE BOARD_NO=#{boardNo}
	</select>
	
	<!-- 조회수 증가, resultType굳이 필요 없음 -->
	<select id="updateReadCount" resultType="_int">
		UPDATE BOARD SET READ_COUNT=BOARD.READ_COUNT+1 WHERE BOARD_NO=#{boardNo}
	</select>

	<!-- 게시글 삽입  -->
	<!-- 
		userGeneratedKeys 속성 : DB 내부적으로 생성한 키 (시퀀스)를 전달된 파라미터의 필드로 대입 가능 여부 지정	
		
		* 동적 SQL * 
		- 프로그램 수행 중 SQL을 변경하는 기능
		
		<selectKey> 태그 : INSERT / UPDATE 시 사용할 키(시퀀스)를
								조회해서 파라미터의 지정된 필드에 대입
		 order 속성 : 메인 SQL이 수행되기 전/후에 selectKey가 수행되도록 지정
		 BEFORE : 전
		 AFTER : 후
		 
		 keyProperty 속성 : selectKey 조회 결과를 저장할 파라미터의 필드
		 
		 		
	-->
	<insert id="boardInsert" parameterType="Board" useGeneratedKeys="true">
		
		<selectKey order="BEFORE" resultType="_int" keyProperty="boardNo">
			SELECT SEQ_BOARD_NO.NEXTVAL FROM DUAL
		</selectKey>
		 
		INSERT INTO BOARD 
      VALUES( #{boardNo},
              #{boardTitle},
              #{boardContent},
              DEFAULT, DEFAULT, DEFAULT, DEFAULT, #{memberNo},
				  #{boardCode})
	</insert>


	<!-- 동적 SQL 중 <foreach> 
      - 특정 SQL 구문을 반복할 때 사용
      - 반복되는 사이에 구분자(separator)를 추가할 수 있음.
      
      collection : 반복할 객체의 타입 작성(list, set, map...)
      item : collection에서 순차적으로 꺼낸 하나의 요소를 저장하는 변수
      index : 현재 반복 접근중인 인덱스 (0,1,2,3,4 ..)
      
      open : 반복 전에 출력할 sql
      close : 반복 종료 후에 출력한 sql
      
      separator : 반복 사이사이 구분자
    -->
	<!-- 이미지 리스트(여러 개) 삽입 -->
	
	<insert id="insertImageList" parameterType="list">
		INSERT INTO BOARD_IMG 
		SELECT SEQ_IMG_NO.NEXTVAL , A.*
		FROM (
		
			<foreach collection="list" item="img" separator=" UNION ALL ">
				SELECT #{img.imagePath} IMG_PATH, #{img.imageReName} IMG_RENAME, #{img.imageOriginal} IMG_ORIGINAL, #{img.imageOrder} IMG_ORDER, #{img.boardNo} BOARD_NO FROM DUAL			
			</foreach>
			
		)A
		

	</insert>
	<!-- 게시글 수정  parameterType="Board" 안써도됨? -->
	<update id="boardUpdate">
		UPDATE BOARD SET BOARD_TITLE=#{boardTitle} ,BOARD_CONTENT=#{boardContent}, B_UPDATE_DATE=SYSDATE  WHERE BOARD_NO=#{boardNo} AND BOARD_CODE=#{boardCode}
	</update>
	
	<delete id="imageDelete">
		DELETE FROM BOARD_IMG WHERE BOARD_NO=#{boardNo} AND IMG_ORDER IN (${deleteList})
	</delete>
<!-- 코드 확인하기

   <update id="imageUpdate">
      UPDATE BOARD_IMG SET
      IMG_PATH = #{imagePath}
      , IMG_RENAME = #{imageReName}
      , IMG_ORIGINAL = #{imageOriginal}
      WHERE BOAR_NO = #{boardNo}
      AND IMG_ORDER = #{imageOrder}
   </update>

 -->
	<update id="imageUpdate">
		UPDATE BOARD_IMG SET IMG_PATH=#{imagePath} , IMG_RENAME=#{imageReName}, IMG_ORIGINAL=#{imageOriginal} WHERE BOARD_NO=#{imageNo} AND IMG_ORDER=#{imageOrder}
	</update>
	
	<insert id="imageInsert">
		INSERT INTO BOARD_IMG VALUES(SEQ_IMG_NO.NEXTVAL, #{imagePath}, #{imageReName}, #{imageOriginal}, #{imageOrder} , #{boardNo})
	</insert>
	
	<update id="boardDelete">
		UPDATE BOARD SET BOARD_DEL_FL = 'Y' WHERE BOARD_NO=#{boardNo} AND BOARD_CODE=#{boardCode}
	</update>
	
<!-- 		JOIN MEMBER USING(MEMBER_NO)
		WHERE BOARD_CODE =1
		AND BOARD_DEL_FL = 'N' -->
	
	<!-- 특정 게시판의 삭제되지 않고 검색 조건이 일치하는 게시글 수 조회 -->
	<select id="getListCountForSearch" resultType="_int">
		SELECT COUNT(*)
		FROM BOARD

		<!-- 작성자 -->
		<if test='key == "w"'>
			JOIN MEMBER USING(MEMBER_NO)	
		</if>
			WHERE BOARD_CODE =#{boardCode}
			AND BOARD_DEL_FL = 'N'
		<choose>
			
				<!-- 제목 -->
			<when test='key == "t"'>
				AND BOARD_TITLE LIKE '%${query}%'			
			</when>
			
				<!-- 내용 -->
			<when test='key == "c"'>
				AND BOARD_CONTENT LIKE '%${query}%'
			</when>
			
				<!-- 제목+내용 -->
			<when test='key == "tc"'>
				AND (BOARD_TITLE LIKE '%${query}%' OR BOARD_CONTENT LIKE '%${query}%')
			</when>
			
			<!-- 작성자 -->
			<when test='key == "w"'>
				AND MEMBER_NICKNAME LIKE '%${query}%'
			</when>
		</choose>

	</select>
	
	<select id="selectBoardListForSearch" resultMap="board_rm">
		SELECT BOARD_NO, BOARD_TITLE, MEMBER_NICKNAME, READ_COUNT, 
       
       	<![CDATA[
          CASE  
             WHEN SYSDATE - B_CREATE_DATE < 1/24/60
             THEN FLOOR( (SYSDATE - B_CREATE_DATE) * 24 * 60 * 60 ) || '초 전'
             WHEN SYSDATE - B_CREATE_DATE < 1/24
             THEN FLOOR( (SYSDATE - B_CREATE_DATE) * 24 * 60) || '분 전'
             WHEN SYSDATE - B_CREATE_DATE < 1
             THEN FLOOR( (SYSDATE - B_CREATE_DATE) * 24) || '시간 전'
             ELSE TO_CHAR(B_CREATE_DATE, 'YYYY-MM-DD')
          END B_CREATE_DATE,
          ]]>
         (SELECT COUNT(*) FROM "COMMENT" C
          WHERE C.BOARD_NO = B.BOARD_NO) COMMENT_COUNT,
          
         (SELECT COUNT(*) FROM BOARD_LIKE L
          WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT,
          
         (SELECT IMG_PATH || IMG_RENAME FROM BOARD_IMG I
         WHERE I.BOARD_NO = B.BOARD_NO
         AND IMG_ORDER = 0) THUMBNAIL
	      FROM "BOARD" B
	      JOIN "MEMBER" USING(MEMBER_NO)
	      WHERE BOARD_DEL_FL = 'N'
	      AND BOARD_CODE = ${boardCode}
	      <choose>
			
				<!-- 제목 -->
			<when test='key == "t"'>
				AND BOARD_TITLE LIKE '%${query}%'			
			</when>
			
				<!-- 내용 -->
			<when test='key == "c"'>
				AND BOARD_CONTENT LIKE '%${query}%'
			</when>
			
				<!-- 제목+내용 -->
			<when test='key == "tc"'>
				AND (BOARD_TITLE LIKE '%${query}%' OR BOARD_CONTENT LIKE '%${query}%')
			</when>
			
			<!-- 작성자 -->
			<when test='key == "w"'>
				AND MEMBER_NICKNAME LIKE '%${query}%'
			</when>
		</choose>
	      ORDER BY BOARD_NO DESC
	</select>
	

	
</mapper>
